buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.postgresql:postgresql:42.2.5'
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'groovy'
}

group = 'com.pruebatecnica.bisa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.5'
    implementation group: 'org.json', name: 'json', version: '20220924'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.4.3'
    runtimeOnly 'org.postgresql:postgresql:42.2.5'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-amqp', version: '2.4.3'
    // https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api
    implementation group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson,
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
    // https://mvnrepository.com/artifact/com.vladmihalcea/hibernate-types-52
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.10.4'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-websocket
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: '2.7.5'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.4'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

import groovy.sql.Sql
@GrabConfig(systemClassLoader = true)
@Grab(group = 'org.postgresql', module = 'postgresql', version = '42.2.5')
import java.sql.Driver

project.ext {
    configDB = { callBack ->
        def driver = Class.forName('org.postgresql.Driver').getDeclaredConstructor().newInstance() as Driver
        def properties = new Properties()
        properties.setProperty("user", "postgres")
        properties.setProperty("password", "pass123")
        def connection = driver.connect("jdbc:postgresql://localhost:5432/planning-poker", properties)
        def sql = new Sql(connection)
        callBack(sql)
    }
}

task droptables() {
    doFirst {
        println('Database: deleting tables')
        def callback = { sql ->
            def sqlFilePath = "src/main/resources/scripts/dropTables.sql"
            def sqlString = new File(sqlFilePath).text
            sql.execute(sqlString)
        }
        project.ext.configDB(callback)
    }
}


task insertDataTest() {
    doFirst {
        println('Database: inserting test data')
        def callback = { sql ->
            def sqlFilePath = "src/main/resources/scripts/data.sql"
            def sqlString = new File(sqlFilePath).text
            sql.execute(sqlString)
        }
        project.ext.configDB(callback)
    }
}

task createTable() {
    doFirst {
        println('Database: creating tables')
        def callback = { sql ->
            def sqlFilePath = "src/main/resources/scripts/createTables.sql"
            def sqlString = new File(sqlFilePath).text
            sql.execute(sqlString)
        }
        project.ext.configDB(callback)
    }
}

createTable.configure {
    dependsOn(droptables)
}

insertDataTest.configure {
    dependsOn(createTable)
}


tasks.named('test') {
    useJUnitPlatform()
}
